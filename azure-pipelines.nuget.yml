trigger: none

parameters:
  - name: version
    displayName: Version to stamp on binaries and nuget package. Should be in form of "major.minor", for example "1.0"
    type: string

pool:
  vmImage: "windows-latest"

variables:
  solution: "src/AppInstallerCLI.sln"
  buildConfiguration: "Release"
  packageName: Microsoft.WindowsPackageManager.Utils

jobs:
  - job: "Build"
    timeoutInMinutes: 120
    variables:
      BuildVer: $[counter(${{ parameters.version }}, 1)]
      version: ${{ parameters.version }}.$(BuildVer)
    steps:
      - script: echo $(version)

      - task: NuGetToolInstaller@1
        displayName: Install Nuget

      # Restores all projects, including native (vcxproj) projects
      - task: NuGetCommand@2
        displayName: Restore Solution
        inputs:
          restoreSolution: "$(solution)"

      # Restore these UAP packages as https://github.com/NuGet/Home/issues/7796 leads to all UAP packages being skipped for restore.
      # Even though they don't need any actual restore action, they need the project.assets.json file to be created and a direct restore does that.
      - task: NuGetCommand@2
        displayName: Restore AppInstallerCLIPackage
        inputs:
          restoreSolution: 'src\AppInstallerCLIPackage\AppInstallerCLIPackage.wapproj'
  
      - task: NuGetCommand@2
        displayName: Restore AppInstallerTestMsixInstaller
        inputs:
          restoreSolution: 'src\AppInstallerTestMsixInstaller\AppInstallerTestMsixInstaller.wapproj'

      # Restores only .NET core projects, but is still necessary, as without this the IndexCreationTool and LocalhostWebServer projects fail to build
      - task: DotNetCoreCLI@2
        displayName: DotNet Restore
        inputs:
          command: "restore"
          projects: "**/*.csproj"

      - task: PowerShell@2
        displayName: Update Binary Version
        condition: not(eq(variables['Build.Reason'], 'PullRequest'))
        inputs:
          filePath: 'src\binver\Update-BinVer.ps1'
          arguments: '-TargetFile binver\binver\version.h -BuildVersion $(BuildVer) -MajorMinorOverride ${{ parameters.version }}'
          workingDirectory: "src"

      - task: VSBuild@1
        displayName: Build Solution x86
        inputs:
          platform: "x86"
          solution: "$(solution)"
          configuration: "$(buildConfiguration)"

      - task: VSBuild@1
        displayName: Build Solution x64
        inputs:
          platform: "x64"
          solution: "$(solution)"
          configuration: "$(buildConfiguration)"

      - task: NuGetCommand@2
        displayName: Pack WingetUtil nuget package
        inputs:
          command: pack
          packagesToPack: WinGetUtil.nuspec
          versioningScheme: byEnvVar
          versionEnvVar: version
          packDestination: "$(Build.ArtifactStagingDirectory)"

      - task: PublishBuildArtifacts@1
        displayName: Publish nuget package to artifacts
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)\$(packageName).$(version).nupkg'
          ArtifactName: $(packageName)
          publishLocation: Container